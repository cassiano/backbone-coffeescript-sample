// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var App, _ref, _ref1, _ref2, _ref3;

    App = {
      Models: {},
      Views: {},
      Collections: {},
      start: function() {
        return new this.Views.ListView;
      }
    };
    App.Models.Item = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref = _Class.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      _Class.prototype.defaults = {
        part1: 'Hello',
        part2: 'Backbone'
      };

      _Class.prototype.greeting = function() {
        return "" + (this.get('part1')) + ", " + (this.get('part2')) + "!";
      };

      _Class.prototype.swap = function() {
        return this.set({
          part1: this.get('part2'),
          part2: this.get('part1')
        });
      };

      return _Class;

    })(Backbone.Model);
    App.Views.ItemView = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref1 = _Class.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      _Class.prototype.tagName = 'li';

      _Class.prototype.initialize = function() {
        _.bindAll(this);
        this.listenTo(this.model, 'change', this.render);
        return this.listenTo(this.model, 'remove', this.unrender);
      };

      _Class.prototype.render = function() {
        $(this.el).html("<span>" + (this.model.greeting()) + "</span>\n<span class=\"swap\">[Swap]</span>\n<span class=\"delete\">[Delete]</span>");
        return this;
      };

      _Class.prototype.unrender = function() {
        return $(this.el).remove();
      };

      _Class.prototype.swap = function() {
        return this.model.swap();
      };

      _Class.prototype.remove = function() {
        return this.model.destroy();
      };

      _Class.prototype.events = {
        'click .swap': 'swap',
        'click .delete': 'remove'
      };

      return _Class;

    })(Backbone.View);
    App.Collections.List = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref2 = _Class.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      _Class.prototype.model = App.Models.Item;

      return _Class;

    })(Backbone.Collection);
    App.Views.ListView = (function(_super) {
      __extends(_Class, _super);

      function _Class() {
        _ref3 = _Class.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      _Class.prototype.el = $('body');

      _Class.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new App.Collections.List;
        this.listenTo(this.collection, 'add', this.appendItem);
        this.counter = 0;
        return this.render();
      };

      _Class.prototype.render = function() {
        $(this.el).append('<button>Add Item</button>');
        $(this.el).append('<ul></ul>');
        return this;
      };

      _Class.prototype.addItem = function() {
        var item;

        this.counter++;
        item = new App.Models.Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.add(item);
      };

      _Class.prototype.appendItem = function(item) {
        var item_view;

        item_view = new App.Views.ItemView({
          model: item
        });
        return $('ul').append(item_view.render().el);
      };

      _Class.prototype.events = {
        'click button': 'addItem'
      };

      return _Class;

    })(Backbone.View);
    return App.start();
  });

}).call(this);
